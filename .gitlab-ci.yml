# GitLab CI/CD Pipeline for MAAS Frontend
# Dual pipelines via tags:
#  - Production: vX.Y.Z (e.g., v1.2.3)
#  - Development: dev-vX.Y.Z (e.g., dev-v1.2.3)

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""
  # Enable BuildKit for faster builds and caching
  DOCKER_BUILDKIT: 1
  BUILDKIT_PROGRESS: plain
  # Image registry - separate repos for pulling base images vs pushing built images
  IMAGE_NAME: maas-front
  IMAGE_TAG: ${CI_COMMIT_TAG}
  # NEXUS_BUILD_REGISTRY - for pulling base images during build (e.g., vortex.kronshtadt.ru:8443)
  # NEXUS_PUSH_REGISTRY - for pushing final built images (e.g., nexus.maas.int.kronshtadt.ru:8443)
  NEXUS_PUSH_IMAGE: ${NEXUS_PUSH_REGISTRY}/maas-hosted/${IMAGE_NAME}
# Optional dedicated cache image in BUILD registry (no final artifacts here)
  NEXUS_BUILD_CACHE_IMAGE: ${NEXUS_BUILD_REGISTRY}/maas-hosted/${IMAGE_NAME}
  NEXUS_BUILD_IMAGE: ${NEXUS_BUILD_REGISTRY}/maas-hosted/${IMAGE_NAME}

stages:
  - build
  - deploy

# Build Docker image for production (vX.Y.Z) and push to PUSH registry
build:production:
  stage: build
  image: ${NEXUS_BUILD_REGISTRY}/maas-proxy/${DOCKER_IMAGE}
  services:
    - name: ${NEXUS_BUILD_REGISTRY}/maas-proxy/docker:28.4.0-dind
      command: ["--insecure-registry=$NEXUS_BUILD_REGISTRY"]
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - node_modules/
      - .npm/
    policy: pull-push
  before_script:
    - echo $NEXUS_BUILD_PASSWORD | docker login -u $NEXUS_BUILD_USER --password-stdin $NEXUS_BUILD_REGISTRY
    # Pull build cache layers from BUILD cache repo if present
    - docker pull $NEXUS_BUILD_CACHE_IMAGE:builder-latest || true
    - docker pull $NEXUS_BUILD_CACHE_IMAGE:buildcache || true
  script:
    - |
      # Build and push builder cache image into BUILD registry (for caching only)
      docker build -f Dockerfile.prod \
        --target builder \
        --build-arg NODE_IMAGE=${NEXUS_BUILD_REGISTRY}/maas-proxy/${NODE_IMAGE} \
        --build-arg NGINX_IMAGE=${NEXUS_BUILD_REGISTRY}/maas-proxy/${NGINX_IMAGE} \
        --build-arg NPM_REGISTRY=$NPM_REGISTRY \
        --build-arg NPM_AUTH=$NPM_AUTH \
        --build-arg APT_PROXY=$APT_PROXY \
        --build-arg BUILDKIT_INLINE_CACHE=1 \
        --cache-from $NEXUS_BUILD_CACHE_IMAGE:builder-latest \
        -t $NEXUS_BUILD_CACHE_IMAGE:builder-latest .
    - docker push $NEXUS_BUILD_CACHE_IMAGE:builder-latest || true
    - |
      # Build final app image using BUILD registry for bases and caches, tag with commit tag and latest
      docker build -f Dockerfile.prod \
        --build-arg NODE_IMAGE=${NEXUS_BUILD_REGISTRY}/maas-proxy/${NODE_IMAGE} \
        --build-arg NGINX_IMAGE=${NEXUS_BUILD_REGISTRY}/maas-proxy/${NGINX_IMAGE} \
        --build-arg NPM_REGISTRY=$NPM_REGISTRY \
        --build-arg NPM_AUTH=$NPM_AUTH \
        --build-arg APT_PROXY=$APT_PROXY \
        --build-arg GIT_TAG=$CI_COMMIT_TAG \
        --build-arg GIT_HASH=$CI_COMMIT_SHA \
        --build-arg GIT_BRANCH=$CI_COMMIT_REF_NAME \
        --build-arg BUILDKIT_INLINE_CACHE=1 \
        --cache-from $NEXUS_BUILD_CACHE_IMAGE:builder-latest \
        --cache-from $NEXUS_BUILD_CACHE_IMAGE:buildcache \
        -t $NEXUS_PUSH_IMAGE:$IMAGE_TAG \
        -t $NEXUS_PUSH_IMAGE:latest .
    - docker push $NEXUS_PUSH_IMAGE:$IMAGE_TAG
    - docker push $NEXUS_PUSH_IMAGE:latest
    - docker rmi $NEXUS_PUSH_IMAGE:$IMAGE_TAG $NEXUS_PUSH_IMAGE:latest || true
  only:
    - /^v[0-9]+\.[0-9]+\.[0-9]+$/
  tags:
    - maas

# Build Docker image for development (dev-vX.Y.Z) and push to PUSH registry
build:development:
  stage: build
  image: ${NEXUS_BUILD_REGISTRY}/maas-proxy/${DOCKER_IMAGE}
  services:
    - name: ${NEXUS_BUILD_REGISTRY}/maas-proxy/docker:28.4.0-dind
      command: ["--insecure-registry=$NEXUS_BUILD_REGISTRY"]
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - node_modules/
      - .npm/
    policy: pull-push
  before_script:
    - echo $NEXUS_BUILD_PASSWORD | docker login -u $NEXUS_BUILD_USER --password-stdin $NEXUS_BUILD_REGISTRY
    - echo $NEXUS_PUSH_PASSWORD | docker login -u $NEXUS_PUSH_USER --password-stdin $NEXUS_PUSH_REGISTRY
    - docker pull $NEXUS_BUILD_CACHE_IMAGE:dev-builder-latest || true
    - docker pull $NEXUS_BUILD_CACHE_IMAGE:dev-buildcache || true
  script:
    - |
      docker build -f Dockerfile.prod \
        --target builder \
        --build-arg NODE_IMAGE=${NEXUS_BUILD_REGISTRY}/maas-proxy/${NODE_IMAGE} \
        --build-arg NGINX_IMAGE=${NEXUS_BUILD_REGISTRY}/maas-proxy/${NGINX_IMAGE} \
        --build-arg NPM_REGISTRY=$NPM_REGISTRY \
        --build-arg NPM_AUTH=$NPM_AUTH \
        --build-arg APT_PROXY=$APT_PROXY \
        --build-arg BUILDKIT_INLINE_CACHE=1 \
        --cache-from $NEXUS_BUILD_CACHE_IMAGE:dev-builder-latest \
        -t $NEXUS_BUILD_CACHE_IMAGE:dev-builder-latest .
    - docker push $NEXUS_BUILD_CACHE_IMAGE:dev-builder-latest || true
    - |
      docker build -f Dockerfile.prod \
        --build-arg NODE_IMAGE=${NEXUS_BUILD_REGISTRY}/maas-proxy/${NODE_IMAGE} \
        --build-arg NGINX_IMAGE=${NEXUS_BUILD_REGISTRY}/maas-proxy/${NGINX_IMAGE} \
        --build-arg NPM_REGISTRY=$NPM_REGISTRY \
        --build-arg NPM_AUTH=$NPM_AUTH \
        --build-arg APT_PROXY=$APT_PROXY \
        --build-arg GIT_TAG=$CI_COMMIT_TAG \
        --build-arg GIT_HASH=$CI_COMMIT_SHA \
        --build-arg GIT_BRANCH=$CI_COMMIT_REF_NAME \
        --build-arg BUILDKIT_INLINE_CACHE=1 \
        --cache-from $NEXUS_BUILD_CACHE_IMAGE:dev-builder-latest \
        --cache-from $NEXUS_BUILD_CACHE_IMAGE:dev-buildcache \
        -t $NEXUS_BUILD_IMAGE:$IMAGE_TAG \
        -t $NEXUS_BUILD_IMAGE:dev-latest .
    - docker push $NEXUS_BUILD_IMAGE:$IMAGE_TAG
    - docker push $NEXUS_BUILD_IMAGE:dev-latest
    - docker rmi $NEXUS_BUILD_IMAGE:$IMAGE_TAG $NEXUS_BUILD_IMAGE:dev-latest || true
  only:
    - /^dev-v[0-9]+\.[0-9]+\.[0-9]+$/
  tags:
    - maas

deploy:production:
  stage: deploy
  image: ${NEXUS_PUSH_REGISTRY}/maas-hosted/maas-deploy-tools:latest
  environment: prod
  before_script:
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - export SSH_PORT="${SSH_PORT:-22}"
    - 'test -n "$SSH_HOST" || { echo "SSH_HOST is not set"; exit 1; }'
    - ssh-keyscan -T 5 -p "$SSH_PORT" "$SSH_HOST" >> ~/.ssh/known_hosts 2>/dev/null || true
    - chmod 644 ~/.ssh/known_hosts
  script:
    - scp -P $SSH_PORT docker-compose.yml $SSH_USER@$SSH_HOST:$REMOTE_PROJECT_PATH/
    - |
      ssh -p $SSH_PORT $SSH_USER@$SSH_HOST << EOF
        set -e
        
        echo "üöÄ PROD: Starting deployment process..."
        echo "Current directory: $(pwd)"
        echo "üåê PROD: Target directory: ${REMOTE_PROJECT_PATH}"
        
        # Check if project directory exists, create if not
        if [ ! -d "${REMOTE_PROJECT_PATH}" ]; then
          echo "üìÅ Project directory does not exist, creating it..."
          sudo mkdir -p ${REMOTE_PROJECT_PATH}
          sudo chown ${SSH_USER}:${SSH_USER} "${REMOTE_PROJECT_PATH}"
          echo "‚úÖ Created project directory and chowned: ${REMOTE_PROJECT_PATH}"
        else
          echo "‚úÖ Project directory exists: ${REMOTE_PROJECT_PATH}"
        fi
        
        # Navigate to project directory
        cd ${REMOTE_PROJECT_PATH}
        echo "‚úÖ Changed to project directory: ${REMOTE_PROJECT_PATH}"
        
        # Create/update .env.production (frontend runtime API)
        echo "üìù PROD: Creating .env.production file..."
        echo "VITE_API_BASE=${VITE_API_BASE}" > .env.production
        echo "VITE_BASE_PATH=${VITE_BASE_PATH}" >> .env.production
        echo "‚úÖ PROD: .env.production created with content:"
        cat .env.production

        # Create/update .env (for docker-compose variable interpolation like PUBLIC_HOST)
        echo "PUBLIC_HOST=${PROD_PUBLIC_HOST}" > .env
        echo "‚úÖ PROD: .env created for compose interpolation"
        
        # Login to Nexus push registry
        echo "üîê PROD: Logging into PUSH registry..."
        echo ${NEXUS_PUSH_PASSWORD} | docker login -u ${NEXUS_PUSH_USER} --password-stdin ${NEXUS_PUSH_REGISTRY}
        echo "‚úÖ PROD: Logged into PUSH registry"
        
        # Update docker-compose.yml image tag
        echo "üîÑ PROD: Updating docker-compose.yml with new image tag..."
        sed -i "s|image:.*maas-front:.*|image: ${NEXUS_PUSH_IMAGE}:${IMAGE_TAG}|g" docker-compose.yml
        echo "‚úÖ PROD: Updated docker-compose.yml"
        echo "üñºÔ∏è PROD: Image -> ${NEXUS_PUSH_IMAGE}:${IMAGE_TAG}"
        
        # Pull new image
        echo "üì• PROD: Pulling new Docker image..."
        sudo docker compose pull
        echo "‚úÖ PROD: Image pulled successfully"
        
        # Stop and remove old container
        echo "üõë PROD: Stopping old container..."
        sudo docker compose down || true
        echo "‚úÖ PROD: Old container stopped"
        
        # Start new container
        echo "üöÄ PROD: Starting new container..."
        sudo docker compose up -d
        echo "‚úÖ PROD: New container started"
        
        # Verify deployment
        sleep 10
        
        # Check container status
        if docker compose ps | grep -q "Up"; then
          echo "‚úÖ PROD: Container is running"
        else
          echo "‚ùå PROD: Container is not running"
          sudo docker compose logs
          exit 1
        fi
        
        # Check if application is responding
        CONTAINER_NAME=$(sudo docker compose ps -q)
        if [ -n "$CONTAINER_NAME" ]; then
          # Wait for application to be ready
          for i in {1..30}; do
            if sudo docker exec $CONTAINER_NAME curl -f http://localhost:80/health 2>/dev/null; then
              echo "‚úÖ PROD: Application health check passed"
              break
            elif [ $i -eq 30 ]; then
              echo "‚ùå PROD: Application health check failed after 30 attempts"
              sudo docker compose logs
              exit 1
            else
              echo "‚è≥ PROD: Waiting for application to be ready... ($i/30)"
              sleep 2
            fi
          done
        fi
        
        # Log deployment info
        echo "‚úÖ PROD: Deployment successful"
        echo "üñºÔ∏è PROD: Image: ${NEXUS_PUSH_IMAGE}:${IMAGE_TAG}"
        echo "üìä PROD: Container status:"
        sudo docker compose ps
        echo "üßæ PROD: Container logs (last 20 lines):"
        sudo docker compose logs --tail=20
        
        # Create deployment marker file
        echo "Deployment completed at $(date)" > deployment.log
        echo "Image: ${NEXUS_PUSH_IMAGE}:${IMAGE_TAG}" >> deployment.log
        echo "Git tag: ${IMAGE_TAG}" >> deployment.log
        echo "Git commit: ${CI_COMMIT_SHA}" >> deployment.log
      EOF
  only:
    - /^v[0-9]+\.[0-9]+\.[0-9]+$/
  dependencies:
    - build:production
  tags:
    - maas

# Deploy to remote development server
deploy:development:
  stage: deploy
  image: ${NEXUS_PUSH_REGISTRY}/maas-hosted/maas-deploy-tools:latest
  environment: dev
  before_script:
    - eval $(ssh-agent -s)
    - echo "$DEV_SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - export DEV_SSH_PORT="${DEV_SSH_PORT:-22}"
    - 'test -n "$DEV_SSH_HOST" || { echo "DEV_SSH_HOST is not set"; exit 1; }'
    - ssh-keyscan -T 5 -p "$DEV_SSH_PORT" "$DEV_SSH_HOST" >> ~/.ssh/known_hosts 2>/dev/null || true
    - chmod 644 ~/.ssh/known_hosts
  script:
    - scp -P $DEV_SSH_PORT docker-compose.yml $DEV_SSH_USER@$DEV_SSH_HOST:$DEV_REMOTE_PROJECT_PATH/
    - |
      ssh -p $DEV_SSH_PORT $DEV_SSH_USER@$DEV_SSH_HOST << EOF
        set -e
        echo "üöÄ DEV: Starting development deployment..."
        if [ ! -d "${DEV_REMOTE_PROJECT_PATH}" ]; then
          sudo mkdir -p ${DEV_REMOTE_PROJECT_PATH}
          sudo chown ${DEV_SSH_USER}:${DEV_SSH_USER} "${DEV_REMOTE_PROJECT_PATH}"
        fi
        cd ${DEV_REMOTE_PROJECT_PATH}
        echo "üìù DEV: Creating .env.production file..."
        echo "VITE_API_BASE=${VITE_API_BASE_DEV}" > .env.production
        echo "VITE_BASE_PATH=${VITE_BASE_PATH_DEV}" >> .env.production
        echo "PUBLIC_HOST=${DEV_PUBLIC_HOST}" > .env
        echo "üîê DEV: Logging into BUILD registry..."
        echo ${NEXUS_BUILD_PASSWORD} | docker login -u ${NEXUS_BUILD_USER} --password-stdin ${NEXUS_BUILD_REGISTRY}
        sed -i "s|image:.*maas-front:.*|image: ${NEXUS_BUILD_IMAGE}:${IMAGE_TAG}|g" docker-compose.yml
        echo "üì• DEV: Pulling image from BUILD..."
        sudo docker compose pull
        echo "üõë DEV: Restarting container..."
        sudo docker compose down || true
        sudo docker compose up -d
        sleep 10
        if docker compose ps | grep -q "Up"; then echo "‚úÖ DEV: Container is running"; else sudo docker compose logs; exit 1; fi
      EOF
  only:
    - /^dev-v[0-9]+\.[0-9]+\.[0-9]+$/
  dependencies:
    - build:development
  tags:
    - maas
